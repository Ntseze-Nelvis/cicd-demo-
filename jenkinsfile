pipeline {
    agent any
    tools {
        maven "MAVEN3.9.9"
        jdk "JDK21"
    }  

    environment {        
        SONARSERVER = 'sonarserver'  // Must match Jenkins config name
        SONARSCANNER = 'sonarscanner'
        IMAGE_NAME = 'nelvis1/ecommerce-app'
        IMAGE_TAG = 'latest'
        // SonarCloud-specific variables
        SONAR_HOST_URL = 'https://sonarcloud.io'
        SONAR_TOKEN = credentials('sonar-token')  // Jenkins credential ID
    }
 

    stages {
        stage('Build') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
            post {
                success {
                    echo "Now Archiving."
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
               withSonarQubeEnv("${SONAR_TOKEN}") {
                   sh """${scannerHome}/bin/sonar-scanner \
                   -Dsonar.host.url=${SONAR_HOST_URL} \
                   -Dsonar.login=${SONAR_TOKEN} \
                   -Dsonar.projectKey=sonartokene \
                   -Dsonar.projectName=sonartokene \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.organization=nel-org \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/classes/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml"""
               }
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                sh '''
                echo "Installing unzip..."
                sudo apt-get update && sudo apt-get install -y unzip

                echo "Downloading OWASP Dependency-Check CLI..."
                curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip

                echo "Unzipping..."
                unzip -o -q dependency-check.zip -d dependency-check-dir

                echo "Setting executable permission..."
                chmod +x dependency-check-dir/dependency-check/bin/dependency-check.sh

                echo "Running OWASP Dependency-Check..."
                ./dependency-check-dir/dependency-check/bin/dependency-check.sh \
                    --project "MyProject" \
                    --scan . \
                    --format HTML \
                    --out owasp-report \
                    --failOnCVSS 7 || true
                '''
            }
        }

        stage('Building image') {
            steps {
                script {
                    sh "docker build -t $IMAGE_NAME:$BUILD_NUMBER ."
                    sh "docker tag $IMAGE_NAME:$BUILD_NUMBER $IMAGE_NAME:$IMAGE_TAG"
                }
            }
        } 

        stage('Trivy Scan') {
            steps {
                script {
                    sh "trivy image --severity HIGH,CRITICAL --format table $IMAGE_NAME:$BUILD_NUMBER"
                    sh "trivy image -f json -o trivy-results.json $IMAGE_NAME:$BUILD_NUMBER"
                }
            }
        }

        stage('Push to Dockerhub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DOCKER_LOGIN',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh """
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker push $IMAGE_NAME:$BUILD_NUMBER
                    docker push $IMAGE_NAME:$IMAGE_TAG
                    docker logout
                    """
                }
            }
        }

        stage('Remove Images') {
            steps {
                script {
                    sh "docker rmi $IMAGE_NAME:$BUILD_NUMBER || true"
                    sh "docker rmi $IMAGE_NAME:$IMAGE_TAG || true"
                }
            }
        }

        stage('Update ECS Task Definition') {
            steps {
                script {
                    sh '''aws ecs describe-task-definition --task-definition arn:aws:ecs:us-east-1:997450571655:task-definition/jenkins-cicd-task --query 'taskDefinition.{family: family, taskRoleArn: taskRoleArn, executionRoleArn: executionRoleArn, networkMode: networkMode, containerDefinitions: containerDefinitions, volumes: volumes, placementConstraints: placementConstraints, requiresCompatibilities: requiresCompatibilities, cpu: cpu, memory: memory}' --output json > task-def.json'''
                    
                    def taskDefinition = readFile('task-def.json')
                    def newTaskDefinition = taskDefinition.replaceAll(/"image":\\s*".*?"/, '"image": "' + IMAGE_NAME + ':' + IMAGE_TAG + '"')
                    
                    writeFile file: 'new-task-definition.json', text: newTaskDefinition
                    sh 'aws ecs register-task-definition --cli-input-json file://new-task-definition.json'
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                script {
                    sh 'aws ecs update-service --cluster jenkins-cicd-cluster --service jenkins-cicd-service --force-new-deployment'
                }
            }
        }
    }
}
